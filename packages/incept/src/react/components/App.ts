import React, { Attributes, ComponentType } from 'react';
import { Switch, Route, RouteProps } from 'react-router-dom';
import loadProps from  '../props';

export type AppProps = Attributes & { 
  serverProps: {
    req: Request,
    res: Response,
    routeProps: Attributes
  };
  routes: ComponentRoute[];
};

export type ComponentRoute = {
  path: string, 
  view: ComponentType, 
  layout: ComponentType 
}

export type LayoutProps = Attributes & {
  view: ComponentType,
  routes: ComponentRoute[],
  routeProps?: Attributes
};

export type LoadableComponent = ComponentType & {
  loadProps?: Function;
  load?: Function;
  preload?: Function;
  render?: Function;  
}

export default function App(props: AppProps) {
  const { serverProps, ...appProps } = props;
  const routes = props.routes || [];
  //build the switch cases
  const cases = routes.map((route, key) => {
    function LayoutPopulator(routeProps: RouteProps) {
      //add view, route props from the server 
      //and all the app props to the layout props.
      //let the layout props figure out how to 
      //separate it all...
      const layoutProps: LayoutProps = { view: route.view, ...appProps };
      //if there are no route props (from the server)
      if (serverProps?.routeProps) {
        layoutProps.routeProps = serverProps.routeProps
      } else {
        //try to call `getInitialProps` or `getStaticProps`
        const view = route.view as LoadableComponent;
        view.loadProps = loadProps(routeProps);
      }
      
      return React.createElement(route.layout, layoutProps);
    }
    return React.createElement(Route, { 
      key, 
      path: route.path, 
      exact: true, 
      component: LayoutPopulator 
    });
  });
  return React.createElement(Switch, {}, cases);
}

/* LEGEND: 
 - appProps - is all the settings and routes from the server and 
   isomorphically generated in the entry file
   - routes - [...{ view, layout, path }]
   - [...key:value] - generated from passing a 
     `app.withReact.config(name, path)` in your plugin/s
 - serverProps - props originating from the server (this wont exist in 
   client side)
   - req - The current server `Request`
   - res - The current server `Response`
   - routeProps - Route props generated by `getServerProps()` and 
     `getInitialProps()`
 - routeProps - Props made by `react-router`
   see: https://reactrouter.com/web/api/Route/route-props
   - match
     - params - (object) Key/value pairs parsed from the URL 
       corresponding to the dynamic segments of the path
     - isExact - (boolean) true if the entire URL was matched (no 
       trailing characters)
     - path - (string) The path pattern used to match. Useful for 
       building nested <Route>s
     - url - (string) The matched portion of the URL. Useful for 
       building nested <Link>s
   - location
     - key: 'ac3df4'
     - pathname: '/somewhere'
     - search: '?some=search-string'
     - hash: '#howdy'
     - state: { [userDefined]: true }
   - history
     - length - (number) The number of entries in the history stack
     - action - (string) The current action (PUSH, REPLACE, or POP)
     - location - (object) The current location. May have the following 
       properties:
       - pathname - (string) The path of the URL
       - search - (string) The URL query string
       - hash - (string) The URL hash fragment
       - state - (object) location-specific state that was provided to 
         e.g. push(path, state) when this location was pushed onto the 
         stack. Only available in browser and memory history.
     - push(path, [state]) - (function) Pushes a new entry onto the 
       history stack
     - replace(path, [state]) - (function) Replaces the current entry 
       on the history stack
     - go(n) - (function) Moves the pointer in the history stack by N 
       entries
     - goBack() - (function) Equivalent to go(-1)
     - goForward() - (function) Equivalent to go(1)
     - block(prompt) - (function) Prevents navigation 
*/